buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath "ru.d10xa:gradle-allure-plugin:0.5.5"
	}
}

plugins {
	id 'com.github.ben-manes.versions' version '0.13.0'
	id 'nebula.contacts' version '3.0.1'
	id 'nebula.facet' version '3.3.0'
	id 'nebula.lint' version '6.3.0'
	id 'org.liquibase.gradle' version '1.2.1'
	id 'org.sonarqube' version '2.2.1'
	id 'org.springframework.boot' version '1.4.3.RELEASE'
}

// Define the classes that should not be analysed for code coverage both in Jacoco and Sonar
def excludedClasses() {
	return [
			'**/org/manuel/teambuilting/experience/**/*Controller*.*',
			'**/org/manuel/teambuilting/experience/config/*.*',
			'**/org/manuel/teambuilting/experience/messages/*.*',
			'**/org/manuel/teambuilting/experience/listeners/*.*',
	]
}

ext {
	snippetsDir = file('build/generated-snippets')
}

group 'org.manuel.teambuilting'
version '0.1.0-SNAPSHOT'

apply plugin: 'build-announcements'
apply plugin: 'build-dashboard'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'org.sonarqube'
apply plugin: 'project-report'
apply plugin: 'ru.d10xa.allure'

jar {
	baseName = "${microserviceName}"
	version = project.version
}

contacts {
	'manuel.doncel.martos@gmail.com' {
		roles 'developer'
	}
}

facets {
	integrationTest {
		parentSourceSet = 'main'
		testTaskName = 'integrationTest'
		includeInCheckLifecycle = false
	}
}

allure {
	clean = false
	allureReportDir = "$buildDir/reports/allure"
}

test {
	outputs.dir snippetsDir
}

integrationTest {
	outputs.dir snippetsDir
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// Jacoco configuration, include only the classes that involve logic
jacocoTestReport {
	reports {
		html {
			enabled true
		}
	}
}

configurations {
	agent
	all {
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jta_1.1_spec'
	}
}

repositories {
	mavenLocal()
	maven { url 'https://repo.spring.io/milestone' }
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-actuator-docs')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-web-services')
	compile('com.auth0:auth0-spring-security-api:0.3.2')

	compile("org.springframework.boot:spring-boot-starter-amqp")

	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	
	compile('javax.inject:javax.inject:1')
	
	compileOnly('org.projectlombok:lombok')
	
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile group: "de.flapdoodle.embed", name: "de.flapdoodle.embed.mongo", version: "1.50.3"
	testCompile("com.github.fakemongo:fongo:1.5.8");

	integrationTestCompile('org.springframework.boot:spring-boot-starter-test')
	integrationTestCompile group: "de.flapdoodle.embed", name: "de.flapdoodle.embed.mongo", version: "1.50.3"
	integrationTestCompile("com.github.fakemongo:fongo:1.5.8");
	
}

bootRun {
	systemProperties 'user.timezone': 'UTC'

	if (project.hasProperty('jvmArgs')) {
		jvmArgs = (project.jvmArgs.split('\\s+') as java.util.List)
	}
}

clean {
	delete 'log'
	delete 'bin'
}

dependencyUpdates.resolutionStrategy = {
	componentSelection { rules ->
		rules.all { selection ->
			boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'pfd'].any { qualifier ->
				selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
			}
			if (rejected) {
				selection.reject('Release candidate')
			}
		}
	}
}

task stage {
    dependsOn build
}